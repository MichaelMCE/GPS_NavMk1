
// A bike computer
// 
// Michael McElligott
// okio@users.sourceforge.net

//  Copyright (c) 2005-2015  Michael McElligott
// 
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU LIBRARY GENERAL PUBLIC LICENSE
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU LIBRARY GENERAL PUBLIC LICENSE for more details.
//
//	You should have received a copy of the GNU Library General Public
//	License along with this library; if not, write to the Free
//	Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



#ifndef _UBLOX_CPP_
#define _UBLOX_CPP_

#pragma GCC optimize ("-O2")


#include <string.h>
#include <ctype.h>
#include <stdint.h>
#include <stdlib.h>
#include "Arduino.h"
#include "ublox.h"
//#include "printf.h"

#ifdef INLINE
#undef INLINE
#endif
#define INLINE						inline __attribute__((always_inline))


// u-blox 7
static const uint8_t ub4800[] PROGMEM =   {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0xc0, 0x12, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd3, 0xfc, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22}; // set baud rate to 4800
static const uint8_t ub9600[] PROGMEM =   {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0xcd, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22}; // set baud rate to 9600
static const uint8_t ub38400[] PROGMEM =  {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0xa8}; // set baud rate to 38400
static const uint8_t ub115200[] PROGMEM = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x96, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};	// set baud rate to 115200
static const uint8_t ub230400[] PROGMEM = {0xb5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd0, 0x08, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc4, 0x96, 0xb5, 0x62, 0x06, 0x00, 0x01, 0x00, 0x01, 0x08, 0x22};	// set baud rate to 230400

static const uint8_t ubRate20000[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x20, 0x4E, 0x01, 0x00, 0x01, 0x00, 0x84, 0x00, 0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30};	// 0.05Hz (1 output per 20 seconds)
static const uint8_t ubRate3000[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xB8, 0x0B, 0x01, 0x00, 0x01, 0x00, 0xD9, 0x41, 0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30}; // 0.33Hz (1 output per 3 seconds)
static const uint8_t ubRate1000[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xE8, 0x03, 0x01, 0x00, 0x01, 0x00, 0x01, 0x39};	// 1hz (E8 03 == once per 1000ms)
static const uint8_t ubRate500[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xF4, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x39};	// 2hz (once per 500ms)
static const uint8_t ubRate200[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A, 0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30}; // 5hz (C8 00 == once per 200ms)
static const uint8_t ubRate100[] PROGMEM = {0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0x64, 0x00, 0x01, 0x00, 0x01, 0x00, 0x7A, 0x12, 0xB5, 0x62, 0x06, 0x08, 0x00, 0x00, 0x0E, 0x30}; // 10hz, (64 00 == once per 100ms)

static const uint8_t ubSleep[] PROGMEM = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x16, 0x74};
static const uint8_t ubSaveCFG[] PROGMEM = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31, 0xBF}; // save current config
static const uint8_t ubHotStart[] PROGMEM = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x68};
static const uint8_t ubColdStart[] PROGMEM = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0xFF, 0x02, 0x00, 0x0E, 0x61};	// Cold Start	
static const uint8_t ubReinitDevice[] PROGMEM = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0xFF, 0x87, 0x01, 0x00, 0x95, 0xF7};	// reinitialize
static const uint8_t ubResetManufDefaults[] PROGMEM = {0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x07, 0x1F, 0x9E};	// reset to manufacturer defaults

static const uint8_t ubPortableMode[] 	PROGMEM = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x00,
													0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
													0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
													0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x1C};


static const uint8_t ubPedestrianMode[] PROGMEM = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x03,
													0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
													0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
													0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x82};

static const uint8_t ubStationaryMode[] PROGMEM = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x02, 
													0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
													0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
													0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
													0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0x60};

static const uint8_t ubAirborneMode[]	PROGMEM = { 0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 
												 	0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00,
												 	0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C,
												 	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
												 	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0xE8};


static const uint8_t ubMsgProtoCfg[2][28] PROGMEM = {
	{0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBB, 0x58},		// IN:UBX+NEMA, OUT:NEMA, 115200
	{0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x00, 0xC2, 0x01, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBC, 0x5E}};		// IN:UBX+NEMA, OUT:UBX+NEMA, 115200
 

// ubx nav STATUS on
static const uint8_t ubNavStatus_on[] PROGMEM = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x01, 0x03,
												 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0xC5};
// ubx nav DOP on												 
static const uint8_t ubNavDOP_on[]    PROGMEM = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x01, 0x04,
												 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x15, 0xCC};
// ubx nav PVT on
static const uint8_t ubNavPVT_on[]    PROGMEM = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x01, 0x07,
												 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18, 0xE1};
// ubx nav SVINFO on
static const uint8_t ubNavSVINFO_on[] PROGMEM = {0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0x01, 0x30,
												 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x41, 0x00};


// SBAS nav enable	
static const uint8_t ubEnableSBAS[] PROGMEM = { 0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x03, 0x07,
												0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xE5};

// SBAS nav disable	
static const uint8_t ubDisableSBAS[] PROGMEM = {0xB5, 0x62, 0x06, 0x16, 0x08, 0x00, 0x02, 0x07,
												0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xDD};


// GPS GNSS config (GPS min:4, max 255)4
static const uint8_t ubGNSS_GPS[] PROGMEM = {0xB5, 0x62, 0x06, 0x3E, 0x24, 0x00, 0x00, 0x00, 0x16,
											 0x04, 0x00, 0x04, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x01,
											 0x01, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05,
											 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x06,
											 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB0, 0x44};


// GPS+SBAS GNSS config (GPS min:4, max 255: SBAS min:1, max 16)
static const uint8_t ubGNSS_GPS_SBAS[] PROGMEM = {  0xB5, 0x62, 0x06, 0x3E, 0x24, 0x00, 0x00, 0x00, 0x16,
													0x04, 0x00, 0x04, 0xFF, 0x00, 0x01, 0x00, 0x00, 0x01,
													0x01, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x01, 0x05,
													0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x06,
													0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB1, 0x58};




// enable PUBX 00
static const uint8_t ubPUBX00_on[]  PROGMEM = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF1, 0x00,
												0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x30};
 
// disable PUBX 00
static const uint8_t ubPUBX00_off[] PROGMEM = { 0xB5, 0x62, 0x06, 0x01, 0x08, 0x00, 0xF1, 0x00,
												0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B}; 



INLINE int calculateChecksum (const char *msg)
{
	int checksum = 0;
	for (int i = 0; msg[i] /*&& i < 20*/; i++)
		checksum ^= (unsigned char)msg[i];

	return checksum;
}

INLINE void gpsWriteBin (const uint8_t *data, const unsigned int len)
{
	for (unsigned int i = 0; i < len; i++)
		module.write(data[i]);
	delay(5);
}

INLINE int nemaMsgSend (const char *msg)
{
	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, F("*%.2X"), calculateChecksum(msg));
	module.print("$");
	module.print(msg);
	module.println(checksum);
	
	return 1;
}

INLINE int nemaMsgDisable (const char *nema)
{
	if (strlen(nema) != 3) return 0;
	
	char tmp[32];
	snprintf(tmp, sizeof(tmp)-1, F("PUBX,40,%s,0,0,0,0"), nema);
	nemaMsgSend(tmp);
	
	return 1;
}

INLINE int nemaMsgEnable (const char *nema)
{
	if (strlen(nema) != 3) return 0;
	
		
	char tmp[32];
	snprintf(tmp, sizeof(tmp)-1, F("PUBX,40,%s,0,1,0,0"), nema);
	nemaMsgSend(tmp);

	return 1;
}

inline void ublox_nema_enable (const char *nema)
{
	nemaMsgEnable(nema);
	delay(5);
}

inline void ublox_nema_disable (const char *nema)
{
	nemaMsgDisable(nema);
	delay(5);
}

inline int ublox_msg_send (const char *msg)
{
	return nemaMsgSend(msg);
}

inline int ublox_set_rate (const int rate)
{
	switch (rate){
	case UBLOX_RATE_20000:
		gpsWriteBin(ubRate20000, sizeof(ubRate20000));
		break;
	case UBLOX_RATE_3000:
		gpsWriteBin(ubRate3000, sizeof(ubRate3000));
		break;
	case UBLOX_RATE_1000:
		gpsWriteBin(ubRate1000, sizeof(ubRate1000));
		break;
	case UBLOX_RATE_500:
		gpsWriteBin(ubRate500, sizeof(ubRate500));
		break;
	case UBLOX_RATE_200:
		gpsWriteBin(ubRate200, sizeof(ubRate200));
		break;
	case UBLOX_RATE_100:
		gpsWriteBin(ubRate100, sizeof(ubRate100));
		break;
	default:
		return 0;
	}
	
	delay(5);
	return 1;
}

inline int ublox_set_baud (const int baud)
{
	switch (baud){
	case UBLOX_BAUD_4800:
		gpsWriteBin(ub4800, sizeof(ub4800));
		break;
	case UBLOX_BAUD_9600:
		gpsWriteBin(ub9600, sizeof(ub9600));
		break;
	case UBLOX_BAUD_38400:
		gpsWriteBin(ub38400, sizeof(ub38400));
		break;
	case UBLOX_BAUD_115200:
		gpsWriteBin(ub115200, sizeof(ub115200));
		break;
	case UBLOX_BAUD_230400:
		gpsWriteBin(ub230400, sizeof(ub230400));
		break;
	default:
		return 0;
	}
	
	delay(5);
	return 1;
}


inline void ublox_pubx_00_enable ()
{
	gpsWriteBin(ubPUBX00_on, sizeof(ubPUBX00_on));
}


inline void ublox_pubx_00_disable ()
{
	gpsWriteBin(ubPUBX00_off, sizeof(ubPUBX00_off));
}

inline void ublox_set_nav_status ()
{
	gpsWriteBin(ubNavStatus_on, sizeof(ubNavStatus_on));
}


inline void ublox_set_nav_dop ()
{
	gpsWriteBin(ubNavDOP_on, sizeof(ubNavDOP_on));
}


inline void ublox_set_nav_pvt ()
{
	gpsWriteBin(ubNavPVT_on, sizeof(ubNavPVT_on));
}

inline void ublox_set_nav_svinfo ()
{
	gpsWriteBin(ubNavSVINFO_on, sizeof(ubNavSVINFO_on));
}

inline void ublox_set_msg_profile (const int cfg)
{
	gpsWriteBin(ubMsgProtoCfg[cfg-1], sizeof(ubMsgProtoCfg[cfg-1]));
	delay(5);
}

inline void ublox_profile_airborne ()
{
	gpsWriteBin(ubAirborneMode, sizeof(ubAirborneMode));
}

inline void ublox_profile_stationary ()
{
	gpsWriteBin(ubStationaryMode, sizeof(ubStationaryMode));
}

inline void ublox_profile_portable ()
{
	gpsWriteBin(ubPortableMode, sizeof(ubPortableMode));
}

inline void ublox_profile_pedestrian ()
{
	gpsWriteBin(ubPedestrianMode, sizeof(ubPedestrianMode));
}

inline void ublox_sbas_disable ()
{
	gpsWriteBin(ubDisableSBAS, sizeof(ubDisableSBAS));
	delay(5);
}

inline void ublox_sbas_enable ()
{
	gpsWriteBin(ubEnableSBAS, sizeof(ubEnableSBAS));
	delay(5);
}

inline void ublox_set_gnss_gps ()
{
	gpsWriteBin(ubGNSS_GPS, sizeof(ubGNSS_GPS));
}

inline void ublox_set_gnss_gps_sbas ()
{
	gpsWriteBin(ubGNSS_GPS_SBAS, sizeof(ubGNSS_GPS_SBAS));
}

inline void ublox_set_sleep ()
{
	gpsWriteBin(ubSleep, sizeof(ubSleep));
}

inline void ublox_request_coldstart ()
{
	gpsWriteBin(ubColdStart, sizeof(ubColdStart));
}

inline void ublox_request_hotstart ()
{
	gpsWriteBin(ubHotStart, sizeof(ubHotStart));
}

inline void ublox_request_softreset ()
{
	gpsWriteBin(ubReinitDevice, sizeof(ubReinitDevice));
}

inline void ublox_request_reset ()
{
	gpsWriteBin(ubResetManufDefaults, sizeof(ubResetManufDefaults));
}

inline void ublox_request_saveconfig ()
{
	gpsWriteBin(ubSaveCFG, sizeof(ubSaveCFG));
}

inline void ublox_start (const int rate)
{
	module.begin(rate);
}

inline void ublox_stop ()
{
	module.end();
}

inline int ublox_hasdata ()
{
	return module.available() > 0;
}

inline char ublox_read ()
{
	return module.read();
}


#endif

